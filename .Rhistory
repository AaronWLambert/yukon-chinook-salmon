#=================================================================================
#NOTES:
# This script is the general working script that is used to run single iterations
#  of the model with any current Stan file.
#
#
# Next steps:
#
#
#=================================================================================
require(rstan)
require(bayesplot)
# require(rstanarm)
require(tidyverse)
require(mgcv)
require(ggthemes)
require(viridis)
require(shinystan)
require(lubridate)
require(reshape2)
require(dplyr)
require(ggthemes)
require(tidybayes)
rstan_options(auto_write = TRUE)
mc.cores = parallel::detectCores()
# set to working directory
wd <- "C:/Users/aaron/Desktop/Yukon Kings/Inseason Forcast Model"
setwd(wd)
# Objects used to save/load data, outputs, or stan/R scripts
dir.output <- file.path(wd,"output")
dir.figs <- file.path(wd,"figs")
dir.stan <- file.path(wd,"Stan")
dir.data <- file.path(wd,"Data")
dir.R <- file.path(wd,"R")
# Parralize for optimum model run time
rstan_options(auto_write = TRUE)
#
mc.cores = parallel::detectCores()
# Define Workflow Paths ============================================
wd <- "C:/Users/aaron/Desktop/Yukon Kings/Inseason Forcast Model"
setwd(wd)
dir.output <- file.path(wd,"output")
dir.figs <- file.path(wd,"figs")
dir.stan <- file.path(wd,"Stan")
dir.data <- file.path(wd,"Data")
dir.R <- file.path(wd,"R")
# Call in functions from model_run_funciton.r
source(file = file.path(dir.R,"model_run_function.r"))
source(file = file.path(dir.R,"Retro Function.R"))
######### Import Data ###############
# Historical Canadian EOS reconstructed run
# CAN_hist <- readRDS(file.path(dir.data,"/EOS Reconstructed Canadian.RDS"))
# CAN_hist <- readRDS(file.path(dir.data,"Reconstructed_CAN_Yukon_Chinook_Run_1995_2019.RDS"))
# This is the reconstructed data from Curry for old reconstructed modeling procedure
CAN_hist <- readRDS(file.path(dir.data,"Can Origin Reconstructed 2Feb22.RDS"))
# Read in PSS non-cummulative with date in date format
PSS_hist <- readRDS(file.path(dir.data,"/PSS Chinook Passage non-cumm.RDS"))
# Read in historical avg of GSI by strata (Naive estimator)
GSI_mean <- readRDS(file = file.path(dir.data,"Mean GSI by strata 2005-2020.RDS"))
# Read in historic preseason forecasts (2013 - current)
# pf_hist <- readRDS(file.path(dir.data,"preseason forcast.RDS"))
pf_hist <- readRDS(file.path(dir.data,"inv_var_weighted_forcast_v3_Jan282022.RDS"))
# Read in genetic stock identification (2005-2019)
# (adjusted to capture early and late runs)
# GSI_by_year <- readRDS(file = file.path(dir.data,"GSI by year"))
GSI_by_year <- readRDS(file = file.path(dir.data,"GSI by year unadj 27April22.RDS"))
# Control Section ######################
model.version <- "3.4"
# MCMC Parameters
n.chains <- 4
n.iter <- 30000;#5e4
n.thin <- 2
# For runs of multiple days with retrospective testing after
testDays <- seq(from = 153, to = 213, by = 5)
# testDays <- 153
testYears <- c(2007:2010,2013:2021)
#                                   CAN_hist = CAN_hist,
#                                   PSS_hist = PSS_hist,
#                                   # GSI_mean = GSI_mean,
#                                   pf_hist = pf_hist,
#                                   GSI_by_year = GSI_by_year)
#
# model.output
# Loop to run model over a selected number of days and years ######################
# To run model, uncomment out the following section
# # List to store outputs
outputList<-list()
for(y in c(testYears)){
for(d in c(testDays)){
outputList[[paste("",y,"_",d, sep = "")]]<-InSeasonProjection(model.version = model.version,
myYear = y,myDay = d,
n.chains = n.chains,
CAN_hist = CAN_hist,
pf_hist = pf_hist,
PSS_hist = PSS_hist,
n.thin = n.thin,
n.iter = n.iter,
GSI_by_year = GSI_by_year)
print(d)
} #dloop
print(y)
} #yloop
# Save output
saveRDS(object = outputList, file = file.path(dir.output, "OutPut_ver21_oldCan_2007_2010_2013_2021_3.4.RDS"))
